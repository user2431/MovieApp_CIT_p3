{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivans\\\\Desktop\\\\Roskilde\\\\7th sem\\\\Complex IT systems\\\\exam\\\\3rd-main\\\\src\\\\components\\\\ActorDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActorDetails = ({\n  selectedActor,\n  setSelectedActor\n}) => {\n  _s();\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\n  const [actorMovies, setActorMovies] = useState([]);\n  const [actorImages, setActorImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const apiKey = \"b5987557d1737fe1b74313c3201f2152\";\n  useEffect(() => {\n    const fetchActorDetails = async actorId => {\n      setIsLoading(true);\n      try {\n        const moviesResponse = await axios.get(`https://api.themoviedb.org/3/person/${actorId}/movie_credits?api_key=${apiKey}`);\n        setActorMovies(moviesResponse.data.cast.slice(0, 5));\n        const imagesResponse = await axios.get(`https://api.themoviedb.org/3/person/${actorId}/images?api_key=${apiKey}`);\n        setActorImages(imagesResponse.data.profiles.slice(0, 5));\n        const actorResponse = await axios.get(`https://api.themoviedb.org/3/person/${actorId}?api_key=${apiKey}`);\n        setSelectedActor(actorResponse.data);\n      } catch (error) {\n        console.error(\"Error fetching actor details:\", error);\n        alert(\"An error occurred while fetching actor details.\");\n      }\n      setIsLoading(false);\n    };\n    if (selectedActor) {\n      fetchActorDetails(selectedActor.id);\n      setIsPopupVisible(true);\n    }\n  }, [selectedActor]);\n  const closePopup = () => {\n    setIsPopupVisible(false);\n    setSelectedActor(null);\n  };\n  return isPopupVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"actor-popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedActor.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedActor.biography || \"No biography available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actor-images\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"images-grid\",\n          children: actorImages.length > 0 ? actorImages.map(image => /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w200${image.file_path}`,\n            alt: \"Actor\",\n            className: \"actor-image\"\n          }, image.file_path, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No images available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actor-movies\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Best Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movies-grid\",\n          children: actorMovies.length > 0 ? actorMovies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://image.tmdb.org/t/p/w200${movie.poster_path}`,\n              alt: movie.title,\n              className: \"movie-poster\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }, this)]\n          }, movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No movies available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closePopup,\n        className: \"close-btn\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n};\n_s(ActorDetails, \"jGh4sHTWcPWAqg1OfePRVP8zK60=\");\n_c = ActorDetails;\nexport default ActorDetails;\nvar _c;\n$RefreshReg$(_c, \"ActorDetails\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ActorDetails","selectedActor","setSelectedActor","_s","isPopupVisible","setIsPopupVisible","actorMovies","setActorMovies","actorImages","setActorImages","isLoading","setIsLoading","apiKey","fetchActorDetails","actorId","moviesResponse","get","data","cast","slice","imagesResponse","profiles","actorResponse","error","console","alert","id","closePopup","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","biography","length","map","image","src","file_path","alt","movie","poster_path","title","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ivans/Desktop/Roskilde/7th sem/Complex IT systems/exam/3rd-main/src/components/ActorDetail.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ActorDetails = ({ selectedActor, setSelectedActor }) => {\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\n  const [actorMovies, setActorMovies] = useState([]);\n  const [actorImages, setActorImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const apiKey = \"b5987557d1737fe1b74313c3201f2152\";\n\n  useEffect(() => {\n    const fetchActorDetails = async (actorId) => {\n      setIsLoading(true);\n      try {\n        const moviesResponse = await axios.get(\n          `https://api.themoviedb.org/3/person/${actorId}/movie_credits?api_key=${apiKey}`\n        );\n        setActorMovies(moviesResponse.data.cast.slice(0, 5));\n\n        const imagesResponse = await axios.get(\n          `https://api.themoviedb.org/3/person/${actorId}/images?api_key=${apiKey}`\n        );\n        setActorImages(imagesResponse.data.profiles.slice(0, 5));\n\n        const actorResponse = await axios.get(\n          `https://api.themoviedb.org/3/person/${actorId}?api_key=${apiKey}`\n        );\n        setSelectedActor(actorResponse.data);\n      } catch (error) {\n        console.error(\"Error fetching actor details:\", error);\n        alert(\"An error occurred while fetching actor details.\");\n      }\n      setIsLoading(false);\n    };\n\n    if (selectedActor) {\n      fetchActorDetails(selectedActor.id);\n      setIsPopupVisible(true);\n    }\n  }, [selectedActor]);\n\n  const closePopup = () => {\n    setIsPopupVisible(false);\n    setSelectedActor(null);\n  };\n\n  return (\n    isPopupVisible && (\n      <div className=\"actor-popup\">\n        <div className=\"popup-content\">\n          <h2>{selectedActor.name}</h2>\n          <p>{selectedActor.biography || \"No biography available.\"}</p>\n\n          <div className=\"actor-images\">\n            <h3>Images</h3>\n            <div className=\"images-grid\">\n              {actorImages.length > 0 ? (\n                actorImages.map((image) => (\n                  <img\n                    key={image.file_path}\n                    src={`https://image.tmdb.org/t/p/w200${image.file_path}`}\n                    alt=\"Actor\"\n                    className=\"actor-image\"\n                  />\n                ))\n              ) : (\n                <p>No images available</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"actor-movies\">\n            <h3>Best Movies</h3>\n            <div className=\"movies-grid\">\n              {actorMovies.length > 0 ? (\n                actorMovies.map((movie) => (\n                  <div key={movie.id} className=\"movie-item\">\n                    <img\n                      src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n                      alt={movie.title}\n                      className=\"movie-poster\"\n                    />\n                    <p>{movie.title}</p>\n                  </div>\n                ))\n              ) : (\n                <p>No movies available</p>\n              )}\n            </div>\n          </div>\n          <button onClick={closePopup} className=\"close-btn\">\n            Close\n          </button>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default ActorDetails;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}