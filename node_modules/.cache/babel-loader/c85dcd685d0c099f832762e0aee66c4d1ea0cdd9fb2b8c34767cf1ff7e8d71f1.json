{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivans\\\\Desktop\\\\MovieApp_frontend-1\\\\src\\\\components\\\\GenrebasedMovies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../CSS/GenrebasedMovies.css';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342';\nconst MoviesList = () => {\n  _s();\n  const {\n    genreName\n  } = useParams(); // Extract genreName from the URL\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(0); // Track current page\n  const [totalPages, setTotalPages] = useState(0); // Track total pages\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      if (!genreName) return;\n      try {\n        setLoading(true);\n        setError(null); // Reset error state before each fetch\n\n        // Make the API request with the genre name and pagination parameters\n        const response = await fetch(`https://localhost:7019/api/movie/genre/${genreName}?page=${page}&pageSize=12`);\n        if (!response.ok) {\n          throw new Error(`Error fetching movies: ${response.statusText}`);\n        }\n        const data = await response.json();\n\n        // Fetch posters for each movie using TMDB API\n        const moviesWithPosters = await Promise.all(data.items.map(async movie => {\n          try {\n            var _tmdbData$tv_results, _tmdbData$tv_results$;\n            const tmdbResponse = await fetch(`https://api.themoviedb.org/3/find/${movie.tconst.trim()}?external_source=imdb_id&api_key=${TMDB_API_KEY}`);\n            const tmdbData = await tmdbResponse.json();\n            console.log(tmdbData);\n            // Get the poster path if available\n            const posterPath = ((_tmdbData$tv_results = tmdbData.tv_results) === null || _tmdbData$tv_results === void 0 ? void 0 : (_tmdbData$tv_results$ = _tmdbData$tv_results[0]) === null || _tmdbData$tv_results$ === void 0 ? void 0 : _tmdbData$tv_results$.poster_path) || null;\n            return {\n              ...movie,\n              posterPath\n            };\n          } catch (err) {\n            console.error(`Failed to fetch poster for ${movie.tconst}:`, err);\n            return {\n              ...movie,\n              posterPath: null\n            }; // Fallback to no poster\n          }\n        }));\n\n        // Update movies state\n        setMovies(moviesWithPosters);\n        setTotalPages(data.numberPages || 1); // Ensure totalPages defaults to 1 if undefined\n      } catch (error) {\n        setError(error.message); // Set error state\n      } finally {\n        setLoading(false); // Always stop loading after the fetch\n      }\n    };\n    fetchMovies();\n  }, [genreName, page]); // Refetch whenever genreName or page changes\n\n  const handleNextPage = () => {\n    if (page < totalPages - 1) {\n      setPage(page + 1);\n    }\n  };\n  const handlePrevPage = () => {\n    if (page > 0) {\n      setPage(page - 1);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading movies...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 21\n  }, this);\n  if (movies.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"no-movies\",\n    children: \"No movies found for this genre.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movies-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Movies List for \", genreName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"movies-grid\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"movie-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/movie/${movie.tconst}`,\n          className: \"movie-link\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: movie.posterPath ? `https://image.tmdb.org/t/p/w200${movie.posterPath}` : '/placeholder.jpg',\n            alt: movie.primarytitle,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: movie.primarytitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), \" (\", movie.startyear, \")\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: movie.genres\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, movie.tconst, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevPage,\n        disabled: page <= 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextPage,\n        disabled: page >= totalPages - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-number\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \" Page:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), \" \", page + 1, \" / \", totalPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(MoviesList, \"rfB4tP1s5erev/LhOt3Jsx5E8rY=\", false, function () {\n  return [useParams];\n});\n_c = MoviesList;\nexport default MoviesList;\nvar _c;\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","jsxDEV","_jsxDEV","TMDB_API_KEY","MoviesList","_s","genreName","movies","setMovies","loading","setLoading","error","setError","page","setPage","totalPages","setTotalPages","fetchMovies","response","fetch","ok","Error","statusText","data","json","moviesWithPosters","Promise","all","items","map","movie","_tmdbData$tv_results","_tmdbData$tv_results$","tmdbResponse","tconst","trim","tmdbData","console","log","posterPath","tv_results","poster_path","err","numberPages","message","handleNextPage","handlePrevPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","to","src","alt","primarytitle","startyear","genres","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ivans/Desktop/MovieApp_frontend-1/src/components/GenrebasedMovies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../CSS/GenrebasedMovies.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342'; \r\n\r\nconst MoviesList = () => {\r\n  const { genreName } = useParams(); // Extract genreName from the URL\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [page, setPage] = useState(0); // Track current page\r\n  const [totalPages, setTotalPages] = useState(0); // Track total pages\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      if (!genreName) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null); // Reset error state before each fetch\r\n\r\n        // Make the API request with the genre name and pagination parameters\r\n        const response = await fetch(`https://localhost:7019/api/movie/genre/${genreName}?page=${page}&pageSize=12`);\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Error fetching movies: ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // Fetch posters for each movie using TMDB API\r\n        const moviesWithPosters = await Promise.all(\r\n          data.items.map(async (movie) => {\r\n            try {\r\n              const tmdbResponse = await fetch(\r\n                `https://api.themoviedb.org/3/find/${movie.tconst.trim()}?external_source=imdb_id&api_key=${TMDB_API_KEY}`\r\n              );\r\n              const tmdbData = await tmdbResponse.json();\r\nconsole.log(tmdbData);\r\n              // Get the poster path if available\r\n              const posterPath = tmdbData.tv_results?.[0]?.poster_path || null;\r\n\r\n              return {\r\n                ...movie,\r\n                posterPath,\r\n              };\r\n            } catch (err) {\r\n              console.error(`Failed to fetch poster for ${movie.tconst}:`, err);\r\n              return { ...movie, posterPath: null }; // Fallback to no poster\r\n            }\r\n          })\r\n        );\r\n\r\n        // Update movies state\r\n        setMovies(moviesWithPosters);\r\n        setTotalPages(data.numberPages || 1); // Ensure totalPages defaults to 1 if undefined\r\n      } catch (error) {\r\n        setError(error.message); // Set error state\r\n      } finally {\r\n        setLoading(false); // Always stop loading after the fetch\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, [genreName, page]); // Refetch whenever genreName or page changes\r\n\r\n  const handleNextPage = () => {\r\n    if (page < totalPages - 1) {\r\n      setPage(page + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    if (page > 0) {\r\n      setPage(page - 1);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"loading\">Loading movies...</div>;\r\n\r\n  if (error) return <div className=\"error\">Error: {error}</div>;\r\n\r\n  if (movies.length === 0) return <div className=\"no-movies\">No movies found for this genre.</div>;\r\n\r\n  return (\r\n    <div className=\"movies-list-container\">\r\n      <h3>Movies List for {genreName}</h3>\r\n      <ul className=\"movies-grid\">\r\n        {movies.map((movie) => (\r\n          <li key={movie.tconst} className=\"movie-item\">\r\n            <Link to={`/movie/${movie.tconst}`} className=\"movie-link\">\r\n            <img\r\n              src={movie.posterPath ? `https://image.tmdb.org/t/p/w200${movie.posterPath}` : '/placeholder.jpg'}\r\n              alt={movie.primarytitle}\r\n              className=\"movie-poster\"\r\n            />\r\n            <div className=\"movie-info\">\r\n              <strong>{movie.primarytitle}</strong> ({movie.startyear})\r\n              <span>{movie.genres}</span>\r\n            </div>\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div className=\"pagination-container\">\r\n        <button onClick={handlePrevPage} disabled={page <= 0}>\r\n          Previous\r\n        </button>\r\n        <button onClick={handleNextPage} disabled={page >= totalPages - 1}>\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"page-number\">\r\n        <strong> Page:</strong> {page + 1} / {totalPages}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}