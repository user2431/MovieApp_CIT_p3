{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivans\\\\Desktop\\\\Roskilde\\\\7th sem\\\\Complex IT systems\\\\exam\\\\3rd-mainlog\\\\src\\\\components\\\\MovieDetail.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useContext } from 'react';\n// import { useParams } from 'react-router-dom';\n// import '../CSS/MovieDetail.css';\n// import { UserContext } from '../App';\n\n// const MovieDetail = () => {\n//   const { tconst } = useParams();\n//   const [movieDetails, setMovieDetails] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [bookmarked, setBookmarked] = useState(false);\n//   const [rating, setRating] = useState(0);\n//   const [comments, setComments] = useState('');\n//   const [posterPath, setPosterPath] = useState(null);\n//   const { userId } = useContext(UserContext);\n\n//   const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342';\n\n//   useEffect(() => {\n//     const fetchMovieDetails = async () => {\n//       try {\n//         setLoading(true);\n\n//         const response = await fetch(`https://localhost:7019/api/movie/${tconst}`);\n//         if (!response.ok) throw new Error('Failed to fetch movie details');\n\n//         const movie = await response.json();\n\n//         const tmdbResponse = await fetch(\n//           `https://api.themoviedb.org/3/find/${tconst}?external_source=imdb_id&api_key=${TMDB_API_KEY}`\n//         );\n//         const tmdbData = await tmdbResponse.json();\n//         const posterPath = tmdbData.tv_results?.[0]?.poster_path || null;\n\n//         setMovieDetails(movie);\n//         setPosterPath(posterPath);\n\n//         // Fetch user-specific data like bookmark, rating, and comments\n//         // Replace with your API endpoints\n//         // const userResponse = await fetch(`https://localhost:7019/api/movie/userdata/${tconst}`);\n//         // const userData = await userResponse.json();\n//         // setBookmarked(userData.bookmarked);\n//         // setRating(userData.rating);\n//         // setComments(userData.comments);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchMovieDetails();\n//   }, [tconst]);\n\n//   const handleBookmark = async () => {\n//     try {\n//       const response = await fetch(`https://localhost:7019/api/bookmark?userId=${userId}&movieId=${tconst}`, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ bookmarked: !bookmarked }),\n//       });\n//       if (response.ok) {\n//         setBookmarked(!bookmarked);\n//       } else {\n//         throw new Error('Failed to update bookmark');\n//       }\n//     } catch (err) {\n//       alert(err.message);\n//     }\n//   };\n\n//   const handleRating = async (newRating) => {\n//     try {\n//       await fetch(`https://localhost:7019/api/rating/rate?userId=${userId}&movieId=${tconst}&rating=${newRating}`, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ tconst, rating: newRating }),\n//       });\n//       setRating(newRating);\n//     } catch (err) {\n//       alert('Failed to submit rating');\n//     }\n//   };\n\n//   const handleCommentSubmit = async () => {\n//     try {\n//       await fetch(`https://localhost:7019/api/movie/comment`, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ tconst, comments }),\n//       });\n//       alert('Comment saved!');\n//     } catch (err) {\n//       alert('Failed to save comment');\n//     }\n//   };\n\n//   if (loading) return <div className=\"loading\">Loading movie details...</div>;\n//   if (error) return <div className=\"error\">Error: {error}</div>;\n\n//   const {\n//     primarytitle,\n//     originaltitle,\n//     startyear,\n//     genres,\n//     runtimeminutes,\n//     titletype,\n//   } = movieDetails;\n\n//   return (\n//     <div className=\"movie-detail-container\">\n//       {posterPath ? (\n//         <img\n//           src={`https://image.tmdb.org/t/p/w300${posterPath}`}\n//           alt={primarytitle}\n//           className=\"movie-poster\"\n//         />\n//       ) : (\n//         <div className=\"placeholder-poster\">No Image Available</div>\n//       )}\n\n//       <div className=\"movie-info\">\n//         <p>\n//           <strong>Title:</strong> {primarytitle}\n//         </p>\n//         <p>\n//           <strong>Original Title:</strong> {originaltitle}\n//         </p>\n//         <p>\n//           <strong>Type:</strong> {titletype}\n//         </p>\n//         <p>\n//           <strong>Start Year:</strong> {startyear}\n//         </p>\n//         <p>\n//           <strong>Genres:</strong> {genres || 'N/A'}\n//         </p>\n//         <p>\n//           <strong>Runtime:</strong> {runtimeminutes ? `${runtimeminutes} minutes` : 'N/A'}\n//         </p>\n//       </div>\n\n//       <div className=\"movie-actions\">\n//         <button onClick={handleBookmark}>\n//           {bookmarked ? 'Remove Bookmark' : 'Add Bookmark'}\n//         </button>\n\n//         <div className=\"rating-section\">\n//           <p>Rate this movie:</p>\n//           {[1, 2, 3, 4, 5].map((num) => (\n//             <button\n//               key={num}\n//               className={`rating-button ${num <= rating ? 'selected' : ''}`}\n//               onClick={() => handleRating(num)}\n//             >\n//               {num}‚≠ê\n//             </button>\n//           ))}\n//         </div>\n\n//         <div className=\"comments-section\">\n//           <textarea\n//             placeholder=\"Add your comments here...\"\n//             value={comments}\n//             onChange={(e) => setComments(e.target.value)}\n//           />\n//           <button onClick={handleCommentSubmit}>Save Comment</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default MovieDetail;\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { UserContext } from '../App';\nimport '../CSS/MovieDetail.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieDetail = () => {\n  _s();\n  const {\n    tconst\n  } = useParams();\n  const {\n    userId\n  } = useContext(UserContext); // Access logged-in user details\n\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [bookmarked, setBookmarked] = useState(false);\n  const [rating, setRating] = useState(0);\n  const [comments, setComments] = useState('');\n  const [posterPath, setPosterPath] = useState(null);\n  const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342';\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        var _tmdbData$tv_results, _tmdbData$tv_results$;\n        setLoading(true);\n        const response = await fetch(`https://localhost:7019/api/movie/${tconst}`);\n        if (!response.ok) throw new Error('Failed to fetch movie details');\n        const movie = await response.json();\n        const tmdbResponse = await fetch(`https://api.themoviedb.org/3/find/${tconst}?external_source=imdb_id&api_key=${TMDB_API_KEY}`);\n        const tmdbData = await tmdbResponse.json();\n        const posterPath = ((_tmdbData$tv_results = tmdbData.tv_results) === null || _tmdbData$tv_results === void 0 ? void 0 : (_tmdbData$tv_results$ = _tmdbData$tv_results[0]) === null || _tmdbData$tv_results$ === void 0 ? void 0 : _tmdbData$tv_results$.poster_path) || null;\n        setMovieDetails(movie);\n        setPosterPath(posterPath);\n\n        // Fetch user-specific data\n        const userResponse = await fetch(`https://localhost:7019/api/movie/userdata?userId=${userId}&movieId=${tconst}`);\n        const userData = await userResponse.json();\n        setBookmarked(userData.bookmarked);\n        setRating(userData.rating);\n        setComments(userData.notes);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieDetails();\n  }, [tconst, userId]);\n  const handleBookmark = async () => {\n    try {\n      await fetch(`https://localhost:7019/api/bookmark?userId=${userId}&movieId=${tconst}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          bookmarked: !bookmarked\n        })\n      });\n      setBookmarked(!bookmarked);\n    } catch (err) {\n      alert('Failed to update bookmark');\n    }\n  };\n  const handleRating = async newRating => {\n    try {\n      await fetch(`https://localhost:7019/api/rating/rate?userId=${userId}&movieId=${tconst}&rating=${newRating}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setRating(newRating);\n    } catch (err) {\n      alert('Failed to submit rating');\n    }\n  };\n  const handleCommentSubmit = async () => {\n    try {\n      await fetch(`https://localhost:7019/api/Notes?Userid=${userId}&MovieId=${tconst}&Notes=${encodeURIComponent(comments)}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('Note saved successfully!');\n    } catch (err) {\n      alert('Failed to save note: ' + err.message);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading movie details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 21\n  }, this);\n  const {\n    primarytitle,\n    originaltitle,\n    startyear,\n    genres,\n    runtimeminutes,\n    titletype\n  } = movieDetails;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-detail-container\",\n    children: [posterPath ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/w300${posterPath}`,\n      alt: primarytitle,\n      className: \"movie-poster\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"placeholder-poster\",\n      children: \"No Image Available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), \" \", primarytitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Original Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), \" \", originaltitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), \" \", titletype]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Start Year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), \" \", startyear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Genres:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), \" \", genres || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Runtime:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), \" \", runtimeminutes ? `${runtimeminutes} minutes` : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBookmark,\n        children: bookmarked ? 'Remove Bookmark' : 'Add Bookmark'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rating-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Rate this movie:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), [1, 2, 3, 4, 5].map(num => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `rating-button ${num <= rating ? 'selected' : ''}`,\n          onClick: () => handleRating(num),\n          children: [num, \"\\u2B50\"]\n        }, num, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Add your comments here...\",\n          value: comments,\n          onChange: e => setComments(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCommentSubmit,\n          children: \"Save Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieDetail, \"12UqJ/QfUxLdoOeILVlUTm72c6s=\", false, function () {\n  return [useParams];\n});\n_c = MovieDetail;\nexport default MovieDetail;\nvar _c;\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useParams","UserContext","jsxDEV","_jsxDEV","MovieDetail","_s","tconst","userId","movieDetails","setMovieDetails","loading","setLoading","error","setError","bookmarked","setBookmarked","rating","setRating","comments","setComments","posterPath","setPosterPath","TMDB_API_KEY","fetchMovieDetails","_tmdbData$tv_results","_tmdbData$tv_results$","response","fetch","ok","Error","movie","json","tmdbResponse","tmdbData","tv_results","poster_path","userResponse","userData","notes","err","message","handleBookmark","method","headers","body","JSON","stringify","alert","handleRating","newRating","handleCommentSubmit","encodeURIComponent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","primarytitle","originaltitle","startyear","genres","runtimeminutes","titletype","src","alt","onClick","map","num","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/ivans/Desktop/Roskilde/7th sem/Complex IT systems/exam/3rd-mainlog/src/components/MovieDetail.js"],"sourcesContent":["// import React, { useState, useEffect, useContext } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import '../CSS/MovieDetail.css';\r\n// import { UserContext } from '../App';\r\n\r\n// const MovieDetail = () => {\r\n//   const { tconst } = useParams();\r\n//   const [movieDetails, setMovieDetails] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [bookmarked, setBookmarked] = useState(false);\r\n//   const [rating, setRating] = useState(0);\r\n//   const [comments, setComments] = useState('');\r\n//   const [posterPath, setPosterPath] = useState(null);\r\n//   const { userId } = useContext(UserContext);\r\n\r\n//   const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342';\r\n\r\n//   useEffect(() => {\r\n//     const fetchMovieDetails = async () => {\r\n//       try {\r\n//         setLoading(true);\r\n\r\n//         const response = await fetch(`https://localhost:7019/api/movie/${tconst}`);\r\n//         if (!response.ok) throw new Error('Failed to fetch movie details');\r\n\r\n//         const movie = await response.json();\r\n\r\n//         const tmdbResponse = await fetch(\r\n//           `https://api.themoviedb.org/3/find/${tconst}?external_source=imdb_id&api_key=${TMDB_API_KEY}`\r\n//         );\r\n//         const tmdbData = await tmdbResponse.json();\r\n//         const posterPath = tmdbData.tv_results?.[0]?.poster_path || null;\r\n\r\n//         setMovieDetails(movie);\r\n//         setPosterPath(posterPath);\r\n\r\n//         // Fetch user-specific data like bookmark, rating, and comments\r\n//         // Replace with your API endpoints\r\n//         // const userResponse = await fetch(`https://localhost:7019/api/movie/userdata/${tconst}`);\r\n//         // const userData = await userResponse.json();\r\n//         // setBookmarked(userData.bookmarked);\r\n//         // setRating(userData.rating);\r\n//         // setComments(userData.comments);\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchMovieDetails();\r\n//   }, [tconst]);\r\n\r\n//   const handleBookmark = async () => {\r\n//     try {\r\n//       const response = await fetch(`https://localhost:7019/api/bookmark?userId=${userId}&movieId=${tconst}`, {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ bookmarked: !bookmarked }),\r\n//       });\r\n//       if (response.ok) {\r\n//         setBookmarked(!bookmarked);\r\n//       } else {\r\n//         throw new Error('Failed to update bookmark');\r\n//       }\r\n//     } catch (err) {\r\n//       alert(err.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleRating = async (newRating) => {\r\n//     try {\r\n//       await fetch(`https://localhost:7019/api/rating/rate?userId=${userId}&movieId=${tconst}&rating=${newRating}`, {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ tconst, rating: newRating }),\r\n//       });\r\n//       setRating(newRating);\r\n//     } catch (err) {\r\n//       alert('Failed to submit rating');\r\n//     }\r\n//   };\r\n\r\n//   const handleCommentSubmit = async () => {\r\n//     try {\r\n//       await fetch(`https://localhost:7019/api/movie/comment`, {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ tconst, comments }),\r\n//       });\r\n//       alert('Comment saved!');\r\n//     } catch (err) {\r\n//       alert('Failed to save comment');\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <div className=\"loading\">Loading movie details...</div>;\r\n//   if (error) return <div className=\"error\">Error: {error}</div>;\r\n\r\n//   const {\r\n//     primarytitle,\r\n//     originaltitle,\r\n//     startyear,\r\n//     genres,\r\n//     runtimeminutes,\r\n//     titletype,\r\n//   } = movieDetails;\r\n\r\n//   return (\r\n//     <div className=\"movie-detail-container\">\r\n//       {posterPath ? (\r\n//         <img\r\n//           src={`https://image.tmdb.org/t/p/w300${posterPath}`}\r\n//           alt={primarytitle}\r\n//           className=\"movie-poster\"\r\n//         />\r\n//       ) : (\r\n//         <div className=\"placeholder-poster\">No Image Available</div>\r\n//       )}\r\n\r\n//       <div className=\"movie-info\">\r\n//         <p>\r\n//           <strong>Title:</strong> {primarytitle}\r\n//         </p>\r\n//         <p>\r\n//           <strong>Original Title:</strong> {originaltitle}\r\n//         </p>\r\n//         <p>\r\n//           <strong>Type:</strong> {titletype}\r\n//         </p>\r\n//         <p>\r\n//           <strong>Start Year:</strong> {startyear}\r\n//         </p>\r\n//         <p>\r\n//           <strong>Genres:</strong> {genres || 'N/A'}\r\n//         </p>\r\n//         <p>\r\n//           <strong>Runtime:</strong> {runtimeminutes ? `${runtimeminutes} minutes` : 'N/A'}\r\n//         </p>\r\n//       </div>\r\n\r\n//       <div className=\"movie-actions\">\r\n//         <button onClick={handleBookmark}>\r\n//           {bookmarked ? 'Remove Bookmark' : 'Add Bookmark'}\r\n//         </button>\r\n\r\n//         <div className=\"rating-section\">\r\n//           <p>Rate this movie:</p>\r\n//           {[1, 2, 3, 4, 5].map((num) => (\r\n//             <button\r\n//               key={num}\r\n//               className={`rating-button ${num <= rating ? 'selected' : ''}`}\r\n//               onClick={() => handleRating(num)}\r\n//             >\r\n//               {num}‚≠ê\r\n//             </button>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <div className=\"comments-section\">\r\n//           <textarea\r\n//             placeholder=\"Add your comments here...\"\r\n//             value={comments}\r\n//             onChange={(e) => setComments(e.target.value)}\r\n//           />\r\n//           <button onClick={handleCommentSubmit}>Save Comment</button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MovieDetail;\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { UserContext } from '../App';\r\nimport '../CSS/MovieDetail.css';\r\n\r\nconst MovieDetail = () => {\r\n  const { tconst } = useParams();\r\n  const { userId } = useContext(UserContext) // Access logged-in user details\r\n\r\n  const [movieDetails, setMovieDetails] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [bookmarked, setBookmarked] = useState(false);\r\n  const [rating, setRating] = useState(0);\r\n  const [comments, setComments] = useState('');\r\n  const [posterPath, setPosterPath] = useState(null);\r\n\r\n  const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342';\r\n\r\n  useEffect(() => {\r\n    const fetchMovieDetails = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        const response = await fetch(`https://localhost:7019/api/movie/${tconst}`);\r\n        if (!response.ok) throw new Error('Failed to fetch movie details');\r\n\r\n        const movie = await response.json();\r\n\r\n        const tmdbResponse = await fetch(\r\n          `https://api.themoviedb.org/3/find/${tconst}?external_source=imdb_id&api_key=${TMDB_API_KEY}`\r\n        );\r\n        const tmdbData = await tmdbResponse.json();\r\n        const posterPath = tmdbData.tv_results?.[0]?.poster_path || null;\r\n\r\n        setMovieDetails(movie);\r\n        setPosterPath(posterPath);\r\n\r\n        // Fetch user-specific data\r\n        const userResponse = await fetch(\r\n          `https://localhost:7019/api/movie/userdata?userId=${userId}&movieId=${tconst}`\r\n        );\r\n        const userData = await userResponse.json();\r\n        setBookmarked(userData.bookmarked);\r\n        setRating(userData.rating);\r\n        setComments(userData.notes);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMovieDetails();\r\n  }, [tconst, userId]);\r\n\r\n  const handleBookmark = async () => {\r\n    try {\r\n      await fetch(\r\n        `https://localhost:7019/api/bookmark?userId=${userId}&movieId=${tconst}`,\r\n        {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ bookmarked: !bookmarked }),\r\n        }\r\n      );\r\n      setBookmarked(!bookmarked);\r\n    } catch (err) {\r\n      alert('Failed to update bookmark');\r\n    }\r\n  };\r\n\r\n  const handleRating = async (newRating) => {\r\n    try {\r\n      await fetch(\r\n        `https://localhost:7019/api/rating/rate?userId=${userId}&movieId=${tconst}&rating=${newRating}`,\r\n        {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n        }\r\n      );\r\n      setRating(newRating);\r\n    } catch (err) {\r\n      alert('Failed to submit rating');\r\n    }\r\n  };\r\n\r\n  const handleCommentSubmit = async () => {\r\n    try {\r\n      await fetch(\r\n        `https://localhost:7019/api/Notes?Userid=${userId}&MovieId=${tconst}&Notes=${encodeURIComponent(\r\n          comments\r\n        )}`,\r\n        {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n        }\r\n      );\r\n      alert('Note saved successfully!');\r\n    } catch (err) {\r\n      alert('Failed to save note: ' + err.message);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"loading\">Loading movie details...</div>;\r\n  if (error) return <div className=\"error\">Error: {error}</div>;\r\n\r\n  const {\r\n    primarytitle,\r\n    originaltitle,\r\n    startyear,\r\n    genres,\r\n    runtimeminutes,\r\n    titletype,\r\n  } = movieDetails;\r\n\r\n  return (\r\n    <div className=\"movie-detail-container\">\r\n      {posterPath ? (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w300${posterPath}`}\r\n          alt={primarytitle}\r\n          className=\"movie-poster\"\r\n        />\r\n      ) : (\r\n        <div className=\"placeholder-poster\">No Image Available</div>\r\n      )}\r\n\r\n      <div className=\"movie-info\">\r\n        <p>\r\n          <strong>Title:</strong> {primarytitle}\r\n        </p>\r\n        <p>\r\n          <strong>Original Title:</strong> {originaltitle}\r\n        </p>\r\n        <p>\r\n          <strong>Type:</strong> {titletype}\r\n        </p>\r\n        <p>\r\n          <strong>Start Year:</strong> {startyear}\r\n        </p>\r\n        <p>\r\n          <strong>Genres:</strong> {genres || 'N/A'}\r\n        </p>\r\n        <p>\r\n          <strong>Runtime:</strong> {runtimeminutes ? `${runtimeminutes} minutes` : 'N/A'}\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"movie-actions\">\r\n        <button onClick={handleBookmark}>\r\n          {bookmarked ? 'Remove Bookmark' : 'Add Bookmark'}\r\n        </button>\r\n\r\n        <div className=\"rating-section\">\r\n          <p>Rate this movie:</p>\r\n          {[1, 2, 3, 4, 5].map((num) => (\r\n            <button\r\n              key={num}\r\n              className={`rating-button ${num <= rating ? 'selected' : ''}`}\r\n              onClick={() => handleRating(num)}\r\n            >\r\n              {num}‚≠ê\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"comments-section\">\r\n          <textarea\r\n            placeholder=\"Add your comments here...\"\r\n            value={comments}\r\n            onChange={(e) => setComments(e.target.value)}\r\n          />\r\n          <button onClick={handleCommentSubmit}>Save Comment</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetail;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,QAAQ;AACpC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC9B,MAAM;IAAEO;EAAO,CAAC,GAAGR,UAAU,CAACE,WAAW,CAAC,EAAC;;EAE3C,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACa,OAAO,EAAEC,UAAU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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}