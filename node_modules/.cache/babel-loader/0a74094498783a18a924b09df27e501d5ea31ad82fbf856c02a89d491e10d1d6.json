{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivans\\\\Desktop\\\\Roskilde\\\\7th sem\\\\Complex IT systems\\\\exam\\\\3rd-mainlog\\\\src\\\\components\\\\GenrebasedMovies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../CSS/GenrebasedMovies.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenrebasedMovies({\n  selectedGenre\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchMoviesByGenre = async () => {\n      if (!selectedGenre) return;\n      setLoading(true);\n      try {\n        const response = await fetch(`https://localhost:7019/api/movie/genre/${selectedGenre}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch genre-based movies');\n        }\n        const data = await response.json();\n        setMovies(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMoviesByGenre();\n  }, [selectedGenre]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movies-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: selectedGenre ? `${selectedGenre} Movies` : 'All Movies'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"movies-grid\",\n      children: !loading && !error && movies.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"movie-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.poster || '/placeholder.jpg',\n          alt: movie.title,\n          className: \"movie-poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: movie.releaseYear\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(GenrebasedMovies, \"WoKQIU7JQQR9tJ7kgXLkBxoW8KE=\");\n_c = GenrebasedMovies;\nexport default GenrebasedMovies;\nvar _c;\n$RefreshReg$(_c, \"GenrebasedMovies\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GenrebasedMovies","selectedGenre","_s","movies","setMovies","loading","setLoading","error","setError","fetchMoviesByGenre","response","fetch","ok","Error","data","json","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","src","poster","alt","title","releaseYear","id","_c","$RefreshReg$"],"sources":["C:/Users/ivans/Desktop/Roskilde/7th sem/Complex IT systems/exam/3rd-mainlog/src/components/GenrebasedMovies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../CSS/GenrebasedMovies.css';\r\n\r\nfunction GenrebasedMovies({ selectedGenre }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMoviesByGenre = async () => {\r\n      if (!selectedGenre) return;\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(\r\n          `https://localhost:7019/api/movie/genre/${selectedGenre}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch genre-based movies');\r\n        }\r\n        const data = await response.json();\r\n        setMovies(data);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMoviesByGenre();\r\n  }, [selectedGenre]);\r\n\r\n  return (\r\n    <div className=\"movies-list-container\">\r\n      <h3>{selectedGenre ? `${selectedGenre} Movies` : 'All Movies'}</h3>\r\n      {loading && <p>Loading movies...</p>}\r\n      {error && <p className=\"error\">{error}</p>}\r\n      <ul className=\"movies-grid\">\r\n        {!loading &&\r\n          !error &&\r\n          movies.map((movie) => (\r\n            <li key={movie.id} className=\"movie-item\">\r\n              <img\r\n                src={movie.poster || '/placeholder.jpg'}\r\n                alt={movie.title}\r\n                className=\"movie-poster\"\r\n              />\r\n              <div className=\"movie-info\">\r\n                <strong>{movie.title}</strong>\r\n                <span>{movie.releaseYear}</span>\r\n              </div>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GenrebasedMovies;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}