{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivans\\\\Desktop\\\\MovieApp_frontend-1\\\\src\\\\components\\\\RecommendedMovies.js\",\n  _s = $RefreshSig$();\n// src/components/RecommendedMovies.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from \"../App\";\nimport { Link } from \"react-router-dom\";\nimport \"../CSS/RecommendedMovies.css\"; // Add CSS for this page\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RecommendedMovies = () => {\n  _s();\n  const {\n    userId\n  } = useContext(UserContext);\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\n  const [page, setPage] = useState(0);\n  const [pageSize] = useState(12);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchRecommendedMovies = async () => {\n      try {\n        setLoading(true);\n\n        // Step 1: Fetch notes to get Movie IDs\n        const notesResponse = await fetch(`https://localhost:7019/api/Notes/notes/${userId}`);\n        if (!notesResponse.ok) throw new Error(\"Failed to fetch user notes.\");\n        const notesData = await notesResponse.json();\n        const movieIds = notesData.items.map(note => note.tconst);\n\n        // Step 2: Fetch similar movies for each Movie ID\n        const similarMoviesSet = new Set();\n        await Promise.all(movieIds.map(async movieId => {\n          const similarResponse = await fetch(`https://localhost:7019/api/movie/similar/${movieId}`);\n          if (similarResponse.ok) {\n            const similarMovies = await similarResponse.json();\n            similarMovies.forEach(movie => similarMoviesSet.add(movie));\n          }\n        }));\n\n        // Convert Set to Array and apply pagination\n        const moviesArray = Array.from(similarMoviesSet);\n        const paginatedMovies = moviesArray.slice(page * pageSize, (page + 1) * pageSize);\n        setRecommendedMovies(paginatedMovies);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (userId) fetchRecommendedMovies();\n  }, [userId, page, pageSize]);\n  const handleNextPage = () => setPage(prev => prev + 1);\n  const handlePrevPage = () => setPage(prev => Math.max(prev - 1, 0));\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading recommendations...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recommended-movies-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recommended Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), recommendedMovies.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-grid\",\n        children: recommendedMovies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-item\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/movie/${movie.tconst}`,\n            className: \"movie-link\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://image.tmdb.org/t/p/w200${movie.posterPath}`,\n              alt: movie.primarytitle,\n              className: \"movie-poster\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: movie.primarytitle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this), \" (\", movie.startyear, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevPage,\n          disabled: page === 0,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          disabled: recommendedMovies.length < pageSize,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No recommended movies found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(RecommendedMovies, \"aTWwwAJFhXmtxYnlCXzlRPLCDkQ=\");\n_c = RecommendedMovies;\nexport default RecommendedMovies;\nvar _c;\n$RefreshReg$(_c, \"RecommendedMovies\");","map":{"version":3,"names":["React","useState","useEffect","useContext","UserContext","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","RecommendedMovies","_s","userId","recommendedMovies","setRecommendedMovies","page","setPage","pageSize","loading","setLoading","error","setError","fetchRecommendedMovies","notesResponse","fetch","ok","Error","notesData","json","movieIds","items","map","note","tconst","similarMoviesSet","Set","Promise","all","movieId","similarResponse","similarMovies","forEach","movie","add","moviesArray","Array","from","paginatedMovies","slice","err","message","handleNextPage","prev","handlePrevPage","Math","max","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","index","to","src","posterPath","alt","primarytitle","startyear","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ivans/Desktop/MovieApp_frontend-1/src/components/RecommendedMovies.js"],"sourcesContent":["// src/components/RecommendedMovies.js\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { UserContext } from \"../App\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../CSS/RecommendedMovies.css\"; // Add CSS for this page\r\n\r\nconst RecommendedMovies = () => {\r\n  const { userId } = useContext(UserContext);\r\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [pageSize] = useState(12);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchRecommendedMovies = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Step 1: Fetch notes to get Movie IDs\r\n        const notesResponse = await fetch(\r\n          `https://localhost:7019/api/Notes/notes/${userId}`\r\n        );\r\n        if (!notesResponse.ok) throw new Error(\"Failed to fetch user notes.\");\r\n        const notesData = await notesResponse.json();\r\n        const movieIds = notesData.items.map((note) => note.tconst);\r\n\r\n        // Step 2: Fetch similar movies for each Movie ID\r\n        const similarMoviesSet = new Set();\r\n        await Promise.all(\r\n          movieIds.map(async (movieId) => {\r\n            const similarResponse = await fetch(\r\n              `https://localhost:7019/api/movie/similar/${movieId}`\r\n            );\r\n            if (similarResponse.ok) {\r\n              const similarMovies = await similarResponse.json();\r\n              similarMovies.forEach((movie) => similarMoviesSet.add(movie));\r\n            }\r\n          })\r\n        );\r\n\r\n        // Convert Set to Array and apply pagination\r\n        const moviesArray = Array.from(similarMoviesSet);\r\n        const paginatedMovies = moviesArray.slice(\r\n          page * pageSize,\r\n          (page + 1) * pageSize\r\n        );\r\n\r\n        setRecommendedMovies(paginatedMovies);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (userId) fetchRecommendedMovies();\r\n  }, [userId, page, pageSize]);\r\n\r\n  const handleNextPage = () => setPage((prev) => prev + 1);\r\n  const handlePrevPage = () => setPage((prev) => Math.max(prev - 1, 0));\r\n\r\n  if (loading) return <p>Loading recommendations...</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  return (\r\n    <div className=\"recommended-movies-container\">\r\n      <h2>Recommended Movies</h2>\r\n      {recommendedMovies.length > 0 ? (\r\n        <>\r\n          <div className=\"movie-grid\">\r\n            {recommendedMovies.map((movie, index) => (\r\n              <div key={index} className=\"movie-item\">\r\n                <Link to={`/movie/${movie.tconst}`} className=\"movie-link\">\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/w200${movie.posterPath}`}\r\n                    alt={movie.primarytitle}\r\n                    className=\"movie-poster\"\r\n                  />\r\n                  <div className=\"movie-details\">\r\n                    <strong>{movie.primarytitle}</strong> ({movie.startyear})\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"pagination\">\r\n            <button onClick={handlePrevPage} disabled={page === 0}>\r\n              Previous\r\n            </button>\r\n            <button onClick={handleNextPage} disabled={recommendedMovies.length < pageSize}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <p>No recommended movies found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecommendedMovies;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}