{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivans\\\\Desktop\\\\Roskilde\\\\7th sem\\\\Complex IT systems\\\\exam\\\\3rd-mainlog\\\\src\\\\components\\\\SearchResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport '../CSS/Home.css'; // Import custom CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchResults = () => {\n  _s();\n  const [movies, setMovies] = useState([]); // Movies fetched from API\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n  const [page, setPage] = useState(0); // Current page\n  const [totalPages, setTotalPages] = useState(0); // Total pages\n  const {\n    type,\n    searchTerm\n  } = useParams(); // Extract search category and term from URL params\n\n  const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342'; // TMDB API Key\n\n  // Function to construct the endpoint based on search type\n  const getSearchEndpoint = () => {\n    switch (type) {\n      case 'releaseyear':\n        return `https://localhost:7019/api/movie/releaseyear/${searchTerm}?page=${page}&pagesize=10`;\n      case 'actorname':\n        return `https://localhost:7019/api/movie/actorname/${searchTerm}?page=${page}&pagesize=10`;\n      case 'movie':\n        return `https://localhost:7019/api/movie/search/${searchTerm}?page=${page}&pagesize=10`;\n      default:\n        return `https://localhost:7019/api/movie/search/${searchTerm}?page=${page}&pagesize=10`;\n    }\n  };\n  useEffect(() => {\n    const fetchSearchResults = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch results from your backend API\n        const endpoint = getSearchEndpoint();\n        const response = await fetch(endpoint);\n        if (!response.ok) {\n          throw new Error('Failed to fetch search results');\n        }\n        const data = await response.json();\n\n        // Fetch poster data from TMDB for each movie\n        const moviesWithPosters = await Promise.all(data.items.map(async movie => {\n          try {\n            var _tmdbData$movie_resul, _tmdbData$movie_resul2;\n            const tmdbResponse = await fetch(`https://api.themoviedb.org/3/find/${movie.tconst.trim()}?external_source=imdb_id&api_key=${TMDB_API_KEY}`);\n            const tmdbData = await tmdbResponse.json();\n\n            // Extract poster path if available\n            const posterPath = ((_tmdbData$movie_resul = tmdbData.movie_results) === null || _tmdbData$movie_resul === void 0 ? void 0 : (_tmdbData$movie_resul2 = _tmdbData$movie_resul[0]) === null || _tmdbData$movie_resul2 === void 0 ? void 0 : _tmdbData$movie_resul2.poster_path) || null;\n            return {\n              ...movie,\n              posterPath\n            };\n          } catch {\n            return {\n              ...movie,\n              posterPath: null\n            };\n          }\n        }));\n        setMovies(moviesWithPosters);\n        setTotalPages(data.numberPages || 1);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchSearchResults();\n  }, [type, searchTerm, page]);\n  const handleNextPage = () => {\n    if (page < totalPages - 1) setPage(page + 1);\n  };\n  const handlePrevPage = () => {\n    if (page > 0) setPage(page - 1);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading search results...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Search Results for \\\"\", searchTerm, \"\\\" in \\\"\", type === 'general' ? 'All Categories' : type, \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/movie/${movie.tconst}`,\n          className: \"movie-link\",\n          children: [movie.posterPath ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w200${movie.posterPath}`,\n            alt: movie.primarytitle,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"placeholder-poster\",\n            children: \"No Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: movie.primarytitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this), \" (\", movie.startyear, \")\", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: movie.genres\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)\n      }, movie.tconst, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevPage,\n        disabled: page <= 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextPage,\n        disabled: page >= totalPages - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-number\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Page:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), \" \", page + 1, \" / \", totalPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchResults, \"PckYLOaN92qVM6Zx3HIVa2G4xYI=\", false, function () {\n  return [useParams];\n});\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["React","useState","useEffect","Link","useParams","jsxDEV","_jsxDEV","SearchResults","_s","movies","setMovies","loading","setLoading","error","setError","page","setPage","totalPages","setTotalPages","type","searchTerm","TMDB_API_KEY","getSearchEndpoint","fetchSearchResults","endpoint","response","fetch","ok","Error","data","json","moviesWithPosters","Promise","all","items","map","movie","_tmdbData$movie_resul","_tmdbData$movie_resul2","tmdbResponse","tconst","trim","tmdbData","posterPath","movie_results","poster_path","numberPages","err","message","handleNextPage","handlePrevPage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","to","src","alt","primarytitle","startyear","genres","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ivans/Desktop/Roskilde/7th sem/Complex IT systems/exam/3rd-mainlog/src/components/SearchResults.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport '../CSS/Home.css'; // Import custom CSS for styling\r\n\r\nconst SearchResults = () => {\r\n    const [movies, setMovies] = useState([]); // Movies fetched from API\r\n    const [loading, setLoading] = useState(true); // Loading state\r\n    const [error, setError] = useState(null); // Error state\r\n    const [page, setPage] = useState(0); // Current page\r\n    const [totalPages, setTotalPages] = useState(0); // Total pages\r\n    const { type, searchTerm } = useParams(); // Extract search category and term from URL params\r\n\r\n    const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342'; // TMDB API Key\r\n\r\n    // Function to construct the endpoint based on search type\r\n    const getSearchEndpoint = () => {\r\n        switch (type) {\r\n            case 'releaseyear':\r\n                return `https://localhost:7019/api/movie/releaseyear/${searchTerm}?page=${page}&pagesize=10`;\r\n            case 'actorname':\r\n                return `https://localhost:7019/api/movie/actorname/${searchTerm}?page=${page}&pagesize=10`;\r\n            case 'movie':\r\n                return `https://localhost:7019/api/movie/search/${searchTerm}?page=${page}&pagesize=10`;\r\n            default:\r\n                return `https://localhost:7019/api/movie/search/${searchTerm}?page=${page}&pagesize=10`;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchSearchResults = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError(null);\r\n\r\n                // Fetch results from your backend API\r\n                const endpoint = getSearchEndpoint();\r\n                const response = await fetch(endpoint);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch search results');\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                // Fetch poster data from TMDB for each movie\r\n                const moviesWithPosters = await Promise.all(\r\n                    data.items.map(async (movie) => {\r\n                        try {\r\n                            const tmdbResponse = await fetch(\r\n                                `https://api.themoviedb.org/3/find/${movie.tconst.trim()}?external_source=imdb_id&api_key=${TMDB_API_KEY}`\r\n                            );\r\n                            const tmdbData = await tmdbResponse.json();\r\n\r\n                            // Extract poster path if available\r\n                            const posterPath = tmdbData.movie_results?.[0]?.poster_path || null;\r\n\r\n                            return { ...movie, posterPath };\r\n                        } catch {\r\n                            return { ...movie, posterPath: null };\r\n                        }\r\n                    })\r\n                );\r\n\r\n                setMovies(moviesWithPosters);\r\n                setTotalPages(data.numberPages || 1);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                setError(err.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchSearchResults();\r\n    }, [type, searchTerm, page]);\r\n\r\n    const handleNextPage = () => {\r\n        if (page < totalPages - 1) setPage(page + 1);\r\n    };\r\n\r\n    const handlePrevPage = () => {\r\n        if (page > 0) setPage(page - 1);\r\n    };\r\n\r\n    if (loading) return <p>Loading search results...</p>;\r\n    if (error) return <p>Error: {error}</p>;\r\n\r\n    return (\r\n        <div className=\"home-page-container\">\r\n            <h3>\r\n                Search Results for \"{searchTerm}\" in \"{type === 'general' ? 'All Categories' : type}\"\r\n            </h3>\r\n            <div className=\"movie-grid\">\r\n                {movies.map((movie) => (\r\n                    <div key={movie.tconst} className=\"movie-item\">\r\n                        <Link to={`/movie/${movie.tconst}`} className=\"movie-link\">\r\n                            {movie.posterPath ? (\r\n                                <img\r\n                                    src={`https://image.tmdb.org/t/p/w200${movie.posterPath}`}\r\n                                    alt={movie.primarytitle}\r\n                                    className=\"movie-poster\"\r\n                                />\r\n                            ) : (\r\n                                <div className=\"placeholder-poster\">No Image</div>\r\n                            )}\r\n                            <div className=\"movie-details\">\r\n                                <strong>{movie.primarytitle}</strong> ({movie.startyear})\r\n                                <p>{movie.genres}</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"pagination-container\">\r\n                <button onClick={handlePrevPage} disabled={page <= 0}>\r\n                    Previous\r\n                </button>\r\n                <button onClick={handleNextPage} disabled={page >= totalPages - 1}>\r\n                    Next\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"page-number\">\r\n                <strong>Page:</strong> {page + 1} / {totalPages}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default SearchResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}