{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivans\\\\Desktop\\\\MovieApp_frontend-1\\\\src\\\\components\\\\RecentReleased.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../CSS/Home.css';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecentReleased = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342';\n  useEffect(() => {\n    const fetchMoviesWithPosters = async () => {\n      try {\n        setLoading(true);\n        const currentyear = new Date().getFullYear();\n        // const response = await fetch(`https://localhost:7019/api/movie/allmovies?page=${page}&pagesize=12`);\n        const response = await fetch(`https://localhost:7019/api/movie/releaseyear/${currentyear}?page=${page}&pagesize=12`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch movies');\n        }\n        const data = await response.json();\n        const moviesWithPosters = await Promise.all(data.items.map(async movie => {\n          var _tmdbData$tv_results, _tmdbData$tv_results$;\n          const tmdbResponse = await fetch(`https://api.themoviedb.org/3/find/${movie.tconst.trim()}?external_source=imdb_id&api_key=${TMDB_API_KEY}`);\n          const tmdbData = await tmdbResponse.json();\n\n          // Get the poster path if available\n          const posterPath = ((_tmdbData$tv_results = tmdbData.tv_results) === null || _tmdbData$tv_results === void 0 ? void 0 : (_tmdbData$tv_results$ = _tmdbData$tv_results[0]) === null || _tmdbData$tv_results$ === void 0 ? void 0 : _tmdbData$tv_results$.poster_path) || null;\n          return {\n            ...movie,\n            posterPath\n          };\n        }));\n        setMovies(moviesWithPosters);\n        setTotalPages(data.numberPages || 1); // Default to 1 if not provided\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchMoviesWithPosters();\n  }, [page]);\n  const handleNextPage = () => {\n    if (page < totalPages - 1) {\n      setPage(page + 1);\n    }\n  };\n  const handlePrevPage = () => {\n    if (page > 0) {\n      setPage(page - 1);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading movies...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Recent Released\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/movie/${movie.tconst}`,\n          className: \"movie-link\",\n          children: [movie.posterPath ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w200${movie.posterPath}`,\n            alt: movie.primarytitle,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"placeholder-poster\",\n            children: \"No Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: movie.primarytitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), \" (\", movie.startyear, \")\", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: movie.genres\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 26\n        }, this)\n      }, movie.tconst, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevPage,\n        disabled: page <= 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextPage,\n        disabled: page >= totalPages - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-number\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \" Page:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), \" \", page + 1, \" / \", totalPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(RecentReleased, \"OSU3/jzXV5Wo+2/qRF5Y9Kw5Qfw=\");\n_c = RecentReleased;\nexport default RecentReleased;\nvar _c;\n$RefreshReg$(_c, \"RecentReleased\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","RecentReleased","_s","movies","setMovies","loading","setLoading","error","setError","page","setPage","totalPages","setTotalPages","TMDB_API_KEY","fetchMoviesWithPosters","currentyear","Date","getFullYear","response","fetch","ok","Error","data","json","moviesWithPosters","Promise","all","items","map","movie","_tmdbData$tv_results","_tmdbData$tv_results$","tmdbResponse","tconst","trim","tmdbData","posterPath","tv_results","poster_path","numberPages","err","message","handleNextPage","handlePrevPage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","to","src","alt","primarytitle","startyear","genres","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ivans/Desktop/MovieApp_frontend-1/src/components/RecentReleased.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../CSS/Home.css'; \r\nimport { Link } from 'react-router-dom';\r\n\r\nconst RecentReleased = () => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [page, setPage] = useState(0); \r\n    const [totalPages, setTotalPages] = useState(0); \r\n\r\n    const TMDB_API_KEY = '9ad9b152ca62395552190ab6ae0fd342'; \r\n\r\n    useEffect(() => {\r\n        const fetchMoviesWithPosters = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const currentyear = new Date().getFullYear();\r\n               // const response = await fetch(`https://localhost:7019/api/movie/allmovies?page=${page}&pagesize=12`);\r\n                const response = await fetch(`https://localhost:7019/api/movie/releaseyear/${currentyear}?page=${page}&pagesize=12`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch movies');\r\n                }\r\n\r\n                const data = await response.json();\r\n                const moviesWithPosters = await Promise.all(\r\n                    data.items.map(async (movie) => {\r\n                      \r\n                        const tmdbResponse = await fetch(\r\n                            `https://api.themoviedb.org/3/find/${movie.tconst.trim()}?external_source=imdb_id&api_key=${TMDB_API_KEY}`\r\n                        );\r\n                        const tmdbData = await tmdbResponse.json();\r\n                             \r\n                        // Get the poster path if available\r\n                        const posterPath =\r\n                            tmdbData.tv_results?.[0]?.poster_path || null;\r\n                        return {\r\n                            ...movie,\r\n                            posterPath,\r\n                        };\r\n                    })\r\n                );\r\n\r\n                setMovies(moviesWithPosters);\r\n                setTotalPages(data.numberPages || 1); // Default to 1 if not provided\r\n                setLoading(false);\r\n            } catch (err) {\r\n                setError(err.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchMoviesWithPosters();\r\n    }, [page]);\r\n\r\n    const handleNextPage = () => {\r\n        if (page < totalPages - 1) {\r\n            setPage(page + 1);\r\n        }\r\n    };\r\n\r\n    const handlePrevPage = () => {\r\n        if (page > 0) {\r\n            setPage(page - 1);\r\n        }\r\n    };\r\n\r\n    if (loading) return <p>Loading movies...</p>;\r\n    if (error) return <p>Error: {error}</p>;\r\n\r\n    return (\r\n        <div className=\"home-page-container\">\r\n            <h3>Recent Released</h3>\r\n            <div className=\"movie-grid\">\r\n                {movies.map((movie) => (\r\n                    <div key={movie.tconst} className=\"movie-item\">\r\n                         <Link to={`/movie/${movie.tconst}`} className=\"movie-link\">\r\n                        {movie.posterPath ? (\r\n                            <img\r\n                                src={`https://image.tmdb.org/t/p/w200${movie.posterPath}`}\r\n                                alt={movie.primarytitle}\r\n                                className=\"movie-poster\"\r\n                            />\r\n                        ) : (\r\n                            <div className=\"placeholder-poster\">No Image</div>\r\n                        )}\r\n                        <div className=\"movie-details\">\r\n                            <strong>{movie.primarytitle}</strong> ({movie.startyear})\r\n                            <p>{movie.genres}</p>\r\n                        </div>\r\n                        </Link>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"pagination-container\">\r\n                <button onClick={handlePrevPage} disabled={page <= 0}>\r\n                    Previous\r\n                </button>\r\n                <button onClick={handleNextPage} disabled={page >= totalPages - 1}>\r\n                    Next\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"page-number\">\r\n                <strong> Page:</strong> {page + 1} / {totalPages}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default RecentReleased;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}